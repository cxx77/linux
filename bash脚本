软件测试这块涉及到linux的就是基本命令的使用，和shell脚本编程，当然会shell脚本是加分项。
学习了差不多20个命令，命令和脚本到底有什么关系呢，和shell编程又有什么联系呢？
    --shell脚本，只是一堆命令的集合。
    
第一节：第一个shell脚本

      1. 桌面创建一个myscript.sh文件
         为什么是 .sh 呢，linux 中 shell 脚本急速这个格式。
         我们还需要知道你当前 bash 脚本在什么路径
              $ which base    打印出了我们bash的路径是 /bin/bash ，这个路径我们待会需要写入到脚本文件。
      
      2. 桌面找到myscript.sh文件，右键用实验楼gedit编辑器打开
         第一行  #！/bin/bash  表示这个脚本用什么去执行，我们这里是bash
         其实linux中有很多类似bash的程序，有c shell 还有z shell等等。
         输入内容：
            ls -l
            mkdir newdir
            cd newdir
            touch file.txt
         
      3. 运行下脚本
         $ ./myscript.sh
         zsh: 权限不够
         $ chmod +x myscript.sh
         $ ./myscript.sh
         
         默认是没有执行权限，需要添加相关权限。
         执行了ls -l这个命令，也在桌面新建了一个newdir的文件夹。
      
      所以，shell脚本就是很多简单的命令，通过一些控制语句和其他方法去执行复杂任务的命令集合。


第二节：shell？bash？shell脚本？
    shell：
        一个内核，里面集成了很多命令，shell负责和底层硬件打交道。
        介绍的基础命令，可以说是shell命令。
        shell程序的入口一般是在终端输入一些相关命令，然后不需要编译，直接去解释和运行命令的结果，给出相关反馈到终端上面。
        所以，一句话来理解，shell是一个很多命令的集合，一个内核。
        
        实验楼支持的shell：$ cat /etc/shells
        
     bash:
          bash 是一个为GNU计划编写的Unix shell。它的名字是一系列缩写：Bourne-Again SHell — 这是关于Bourne shell（sh）的一个双关语（Bourne again / born again）.Bash (GNU Bourne-Again Shell) 是许多Linux发行版的默认Shell。
          还有许多传统UNIX上用的Shell，例如tcsh、csh、ash、bsh、ksh等等，Shell Script大致都类同，学会一种Shell以后，其它的Shell会很快就上手，大多数的时候，一个Shell Script通常可以在很多种Shell上使用。
          所以，这就是我们为什么要使用bash脚本的原因。我们接下来的shell脚本都是基于bash。
          
     shell脚本：
          shell脚本就是通过一些相关shell命令的组合来达到完成一个任务的文件，文件一般是以,sh结尾。
        
      写一个shell脚本，在终端打印hello shell：
          $ cd Desktop
          $ touch hello.sh
          $ ls -l
          $ chmod +x hello.sh
          $ ls -l
          $ gedit hello.sh
          #! /bin/bash
          echo 'Hello shell sceipt!'
          
          $ ./hello.sh
          
第三节：变量和备注
    shell脚本中的备注和变量的用法。和其他编程语言一样，shell也有变量和备注。
    变量就是一个可以存储值的容器，备注在shell中也是采用#符号来表示备注。
    
    1. 用井号后面内容（#）来表示备注
    2. 定义一个变量
        变量有系统变量和用户变量，在shell脚本中，经常用到系统变量。我们用$变量名称来引用变量
        $BASH和$PATH都是系统变量，通过这个可以打印系统变量的值
        看看用户自定义变量的使用，主要红圈代码语句等号前后不要有空格
    3. 保存，添加执行权限，看看打印结果
        $ touch demo.sh
        $ gedit demo.sh
        demo.sh中的内容：
            #! /bin/bash
            # input your commets here
            
            echo "Hello shell" #comment here
            
            echo "the system variable BASH is $BASH"
            
            echo $PATH  #system variable
            
            name=Anthony
            echo "her name is $name"
        $ ls -l
        $ chmod +x demo.sh
        $ ./demo.sh
        
        
第四节：获取用户输入  
    介绍获取用户输入的场景。大概是这样一个场景：
        在命令终端提示用户输入一些什么内容，然后在用户输入完后，会打印刚刚用户输入的内容，这里要用到read这个命令。
        $ cd Desktop
        $ touch demo.sh
        $ gedit demo.sh
            #! /bin/bash
            # learn about how to read from user input
            
            echo "please input your name:"
            read name
            echo "your name is $name"
        $ chmod +x demo.sh
        $ ./demo.sh
        
        同行输入：
            $ read -p "please input your name: " name
            $ echo "your name is $name"
            -p是promote，提示的意思，就是可以让用户在提示语相同一行输入内容
        
        模拟下让用户输入用户名和密码的场景：
            #! /bin/bash
            
            read -p "please input your name: " name
            read -sp "please input ypur password: " password
            echo ""  #换行
            echo "your name is $name, your password is $pasword."
            
            -s一般在密码输入的时候用到，输入过程看不到输入的内容
        
        总结：
            Shell中读取用户的输入的命令是read，一般结合echo一起使用。
       
       
第五节：shell脚本如何传参数
    索引传参数：
        1. $ touch file.sh
        2. $gedit file.sh
            #! /bin/bash
            echo $1 $2 $3
        3. $ ./file.sh xixi hehe love
        $[i]，i是索引号，和Python中列表读取元素是一样道理，采用索引。
        $0表示 我们运行sh文件的语句 ./demo.sh，这个不是一个我们提供的真实的参数
    
    换成args数组方式去存储参数列表:
        #! /bin/bash
        args=("$@")
        #echo ${args[0]} ${args[1]} ${args[2]} ${args[3]}
        echo $@
        
        $@可以表示传入参数列表，直接打印出来:
        
    计算参数个数：
        #! /bin/bash
        args=("$0")
        #echo ${args[0]} ${args[1]} ${args[2]} ${args[3]}
        #echo $@
        echo $#
        
        $#可以存储参数的个数值。
        

第六节：if-then语句
    shell中的if控制语句很像python中的语法
    
    demo.sh:
        #! /bin/bash
        score=91
        
        if (("$score">90))
        then 
            echo "well done"
        fi
        
        word=abc
        if [ $word="abc" ]  #[] 与比较语句之间一定要有空格
        then
            echo "word equals abc"
        else
            echo "word not equals abc"
        fi
        
        num=6
        if (($num>7))
        then
            echo "big"
        elif (($num<7))
        then
            echo "small"
        else
            echo "euqal"
        fi
        
        语句最后那个fi是一个结束语句，告诉shell脚本，遇到了fi就表示if语句的结束，估计fi是final的意思
        
    整数比较符:
         -eq	: (equal to)相等          		    例如： if [ "$a" -eq "$b"  ]
        -ne	: (not equal to)相等      		    例如： if [ "$a" -ne "$b"  ]
        -gt	: (greater than)大于      		    例如： if [ "$a" -gt "$b"  ]
        -ge	: (greater than or equal to)大于或等于      例如： if [ "$a" -ge "$b"  ]
        -lt	: (less than)小于                           例如： if [ "$a" -lt "$b"  ]
        -le	: (less than or equal to)小于或等于         例如： if [ "$a" -le "$b"  ]
        <	: 小于                                      例如： if (( "$a" < "$b" ))
        <=	: 小于等于                                  例如： if (( "$a" <= "$b" ))
        >	: 大于                                      例如： if (( "$a" > "$b" ))
        >=	: 大于等于                                  例如： if (( "$a" >= "$b" ))

        字符串比较

        =	: 等于                                      例如： if [ "$a" = "$b"   ]
        ==	: 等于                                      例如： if [ "$a" == "$b"  ]
        !=	: 不等于                                    例如： if [ "$a" != "$b"  ]
        <	: 小于（ASCII字母顺序）                     例如： if [[ "$a" < "$b" ]]
        >	: 大于（ASCII字母顺序）                     例如： if [[ "$a" > "$b" ]]
        -z	: 字符不为空  
        

第七节：文件测试操作
    通过文件的一些测试操作来练习下if语句，主要还是学习文件的不同操作方法
    
    1. 检查文件夹是否存在
        #! /bin/bash
        echo -e "Enter the name of file: \c"
        read filename

        if [ -e $filename ]
        then
            echo "file founded"
        else
            echo "file is not exist or not founded"
        fi

        -e就是exist的意思，表示文件是否存在。
        第一开始输入一个test，发现不存在，然后通过mkdir创建了一个test的文件夹，再次运行脚本，就打印文件存在。
        
    2. 检查是否是常规文件或者目录，txt文件也可以找到，空文件夹找不到
        #! /bin/bash
        echo -e "Enter the name of file: \c"
        read filename

        if [ -f $filename ]
        then
            echo "$filename founded"
        else
            echo "$filename is not exist or not founded"
        fi
        
        上面的-f表示file，判断是否是常规的文件
        
        #! /bin/bash
        echo -e "Enter the name of file: \c"
        read filename

        if [ -d $filename ]
        then
            echo "$filename founded"
        else
            echo "$filename is not exist or not founded"
        fi
        
        -d表示directory，判断是否是一个目录
        
    3. 检查文件是否是空（文件txt操作可判断是否为空，目录判断不正确）
        #! /bin/bash
        echo -e "Enter the name of file: \c"
        read filename

        if [ -s $filename ]
        then
            echo "$filename is not empty"
        else
            echo "$filename is empty"
        fi
        
        -e表示empty，默认文件是不为空
        

第八节：在一个文件尾部写入内容
    写一个脚本的功能是：
        1. 先判断文件是否是常规文件；
        2. 如果存在，继续判断文件是否有写的权限
        3. 如果有写的权限，然后需要接受键盘的输入；如果文件没有权限，提示没有写入权限（结束）
        4. 把输入的字符保存到文件的尾部，不能覆盖原来文件的内容
        
    demo.sh:
        #! /bin/bash
        
        echo -e "Enter the name of file: \c"
        read filename
        
        if [ -f $filename ]
        then
            if [ -w $filename ]
            then
                echo "$filename have write permissions"
                cat >> $filename
            else
                echo "$filename do not have write permissions"
            fi
        else
            echo "$filename is not exist"
        fi
        
        -f表示判断是否常规文件，-w表示判断是否有write权限
        
    这里是手动输入字符，然后添加到文件尾部，在实际工作中，可以利用变量，来存储我们需要保存到文件的信息
    也就是说cat >> file这部分可以调用别的变量或者脚本去实现自动产生内容，然后保存到文件的目的。
    

第九节：shell脚本基础
    1. 逻辑与 -gt >; -ge >=; -lt <; -le <=;
        #! /bin/bash
        age=25
        
        if [ $age -gt 18 ] && [ $age -lt 30 ]
        then
            echo "valid age"
        fi
        **************************************
        if [ $age -gt 18 -a $age -lt 30 ]
        then
            echo "valid age"
        fi
        **************************************
        if [[ $age -gt 18 && $age -lt 30 ]]  #这个时候变成两个中括号了。
        then
            echo "valid age"
        fi
        
    2. 逻辑或
        #! /bin/bash
        age=25
        
        if [ $age -eq 18 ] || [ $age -gt 20 ]
        then
            echo "valid age"
        fi
        **************************************
        if [ $age -eq 18 -a $age -gt 30 ]
        then
            echo "valid age"
        fi
        **************************************
        if [[ $age -gt 18 || $age -lt 30 ]]  #这个时候变成两个中括号了。
        then
            echo "valid age"
        fi
        
    3. 基本的数学运算
        #! /bin/bash
        echo 3+5
        
        输出的是字符串，不是计算结果
        **************************************
        
        标准的数学计算表达式写法:
            num1=5
            num2=7
            echo $(( num1+num2 ))
            echo $(( num1-num2 ))
            echo $(( num1*num2 ))
            echo $(( num1/num2 ))
            echo $(( num1%num2 ))
            **********************************
            num1=5
            num2=7
            echo $( expr num1+num2 )  #7+5
            echo $( expr num1-num2 )
            echo $( expr num1\*num2 )
            echo $( expr num1/num2 )
            echo $( expr num1%num2 )
            乘法这个地方报错，原来在这个表达式中*这个需要转译才能被识别为乘法（*）
            
    4. 做浮点型计算：bash默认是不支持浮点型数字计算，需要安装bc软件，然后通过bc才能计算浮点型
        在终端输入: sudo apt-get install bc 回车就可以安装bc
        #! /bin/bash
        num1=20.5
        num2=18

        echo "20.5+18" | bc
        

    5. case语句：
        #! /bin/bash
 
        score=$1

        case $score in 
            "90")
                echo "A" ;;
            "80")
                echo "B" ;;
            "70")
                echo "B-" ;;
            "60")
                echo "C" ;;
            * ) 
                echo "Default value" ;;
        esac
        
        脚本 * ，这个表示匹配任意的 case 情况，如果输入的参数不在 case 列举的情况，就执行默认的这种
        score=$1,这里 $1 是代表输入的第一个参数。
        
    6. case语句的练习，在命令终端，让用户输入一些字符，然后判断输入的是字母还是数字，还是其他。
        #! /bin/bash
        echo "Please input some charactor: \C"
        read value

        case $value in 
            [a-z])
                echo "You had input $value a to z" ;;
            [A-Z])
                echo "You had inut $value A to Z" ;;
            [0-9])
                echo "You had input $value 0 to 9" ;;
            ?)
                echo "You had input $value is not a-z A-Z 0-9" ;;
            * ) 
                echo "Default value" ;;
        esac
        
        ? 表示匹配一次，而 * 表示可以匹配多个结果
        [a-z] 表示正则表达式，是表示小写字母 a-z 全部小写字母。

    7. 数组：https://blog.csdn.net/u011541946/article/details/72631543
        #! /bin/bash
        os=('linux' 'unix' 'windows' 'Mac')
        os[4]='Android' # add a element
        #unset os[1]    # remove a element
        echo "${os[@]}"
        echo "${os[1]}"
        echo "${!os[@]}"
        echo "${#os[@]}"

        # string is a arry object
        string=feiegewjgwegewg
        echo "${string[0]}"
        echo "${string[1]}"
        
        string类型其实就是一个数组，只是把字符串全部存储在数组的索引为0的元素里

第十节：while循环
    1. while循环
        历10以下整数的shell while循环写法：
            #! /bin/bash
            n=1
            while [ $n le 10 ]
            do 
                echo "$n"
                n=$(( n+1 ))
            done
            ***************************
            n的自增也可以这样写
            n=1
            while [ $n le 10 ]
            do 
                echo "$n"
                (( n++ )) # (( ++n ))
            done
            **************************
            从1相加到100
            n=1
            total=0
            while (( $n <= 100 ))
            do
                total=$(( total+n ))
                (( n++ ))
            done
            echo $total
        
    2. while循环中使用sleep命令
        从1到10，每隔一秒打印一个数字:
            #! /bin/bash
            # while loops
            n=1

            while (( $n <= 10 ))
            do
                echo $n
                (( n++ ))
                sleep 1

            done
        *****************************
        实现一秒开一个终端:
            #! /bin/bash
            # while loops
            n=1

            while (( $n <= 3 ))
            do
                echo $n
                (( n++ ))
                xfce4-terminal &
                sleep 1
            done
            
    3. while循环读取文件内容
        #! /bin/bash
        while read p
        do
            echo $p
        done < demo.sh
        ***************************
        cat demo.sh | while read p
        do
            echo $p
        done
        ***************************
        while IFS=' ' read -r line
        do
            echo $line
        done < demo.sh
        

第十一节：until循环
    until循环语句语法和while很相同：
        while循环基本语法格式：
            while [ 表达式为真 ]
            do
                 commond1语句
                 command2语句
                 ...
            done

        而until的语法格式如下：
            until [ 表达式不为真 ]
            do
                 commond1语句
                 command2语句
                 ...
            done
            
            #! /bin/bash
            n=1
            until [ $n -ge 10 ]
            do 
                echo "$n"
                n=$(( n+1 ))
            done   
            **************************
            从1相加到100
            n=1
            total=0
            until (( $n > 100 ))
            do
                total=$(( total+n ))
                (( n++ ))
            done
            echo $total
            

第十二节：for循环
    1. for循环语法：
            #! /bin/bash
            for i in 1 2 3 4 5
            do 
                echo $i
            done
            *********************
            total=0
            for (( i=1; i<=100; i++ ))
            do
                total=$(( total+i ))
            done
            echo $total

            for语法：
                ======================================
                for VARIABLE in 12345...N
                do
                    command1
                    command2
                    commandN
                done

                OR=======================================
                for VARIABLE in file1 file2 file3
                do
                    command1 on $VARIABLE
                    command2
                    commandN
                done

                OR=======================================
                for OUTPUT in $(Linux or unix commond here)
                do
                    command1 on $OUTPUT
                    command2 on $OUTPUT
                    commandN
                done

                OR=======================================
                for (( 表达式1; 表达式2; 表达式3 ))
                do
                    command1
                    command2
                    commandN
                done
                
        2. for循环去执行命令
                for循环执行不同命令：
                    #! 

        
    
        
        


            
    

        

    

        
        
        
    
        
                
            
        
        
            
        
     
      
                
